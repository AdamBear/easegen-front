export default {
  tenant:{
    name:'Tenant Name',
    contactName:'Contacts',
    mobile:'Mobile',
    status:'Tenant Status',
    startCreateTime:'Start Time',
    endCreateTime:'End Time',
    package:'Tenant Package',
    systemTenant:'System Tenant',
    accountLimit:'Account Limit',
    expireTime:'Expire Time',
    website:'website',
    username:'UserName',
    password:'Password',
  },
  tenantPackage:{
    packageName:'Package Name',
    startCreateTime:'Start Time',
    endCreateTime:'End Time',
    menuPermissions:'Menu Permissions',
    switch:'Select All/Select None',
    yes:'Yes',
    no:'No',
    menuExpand:'Unfold/Fold All',
    unfold:'Unfold',
    fold:'Fold All',
    treeLoding:'Loading, please wait',
    associatedMenu:'Associated menu number',
  },
  user:{
    username:'UserName',
    mobile:'Mobile',
    status:'Status',
    startCreateTime:'Start Time',
    endCreateTime:'End Time',
    nickname:'NickName',
    dept:'Department',
    type:'User Type',
    resetPasseword:'Reset Password',
    assignRoles:'Assign Roles',
    more:'More',
    resetPasswordText:'the New Password',
    resetPasswordTip:'Modified successfully, the new password is',
    enabled:'Enabled',
    disabled:'Disabled',
    changeStatusTextPre:'Confirm to',
    changeStatusTextSuffix:'User?',
    role:'Role',
    email:'E-mail',
    password:'Password',
    sex:'Sex',
    post:'Post',
    correct:'Correct',
  },
  role:{
    name:'Role Name',
    code:'Role Code',
    status:'status',
    startCreateTime:'Start Time',
    endCreateTime:'End Time',
    type:'Role Type',
    displayOrder:'Display Order',
    menuPermissions:'Menu permissions',
    dataPermissions:'Data permissions',
    permissionsScope:'Scope of Permissions',

    switch:'Select All/Select None',
    yes:'Yes',
    no:'No',
    menuExpand:'Unfold/Fold All',
    unfold:'Unfold',
    fold:'Fold All',
    menuExpandText:'Parent child linkage (select parent node, automatically select child node)',
    treeLoding:'Loading, please wait',
  },
  menu:{
    name:"Menu Name",
    type:"Menu Type",
    status:'Status',
    visible:'Display Status',
    visibleTip:'When choosing to hide, the route will not appear in the sidebar, but it will still be accessible',
    menuExpand:'Unfold/Fold',
    refreshMenuCache:'Refresh menu cache',
    refreshMenuCacheText:'Updating cache and refreshing browser soon!',
    icon:'Icon',
    sort:'Sort',
    permission:'Permission Code',
    permissionTip:'Permission characters on the Controller method, such as @ PreAuthorize (` @ ss. hasPermission (\'system: user: list \') `)',
    componentPath:'Component Path',
    componentPathPlaceholder:'For example: system/user/index',
    routePath:'Route Path',
    routePathTip:'The routing address for access, such as\' user \'. If an external network address is required, start with \'http (s)://\'',
    componentName:'Component Name',
    componentNamePlaceholder:'For example: SystemUser',
    parentName:"Parent Menu",
    display:'Display',
    hide:'Hide',
    alwaysDisplay:'Always display',
    alwaysDisplayTip:'When not selected, if the menu only has one sub menu, do not display yourself and directly display the sub menu',
    always:'Always',
    no:'No',
    cacheStatus:'Cache Status',
    cacheStatusTip:'When selecting cache, it will be \'keep alive\' cached and the \'component name\' field must be filled in',
    cache:'Cache',
    notCache:'Not Cached',
  },
  dept:{
    name:'Dept Name',
    status:'Dept Status',
    menuExpand:'Unfold/Fold',
    person:'Leader',
    sort:'Sort',
    phone:'Phone',
    email:'E-mail',
    correct:'Correct',
  },
  post:{
    name:'Post Name',
    code:'Post Code',
    status:'Status',
    sort:'Post Sort',
    remark:'Post Remark',
  },
  dict:{
    name:'Dictionary Name',
    type:'Dictionary Type',
    status:'Status',
    startCreateTime:'Start Time',
    endCreateTime:'End Time',
    data:'Data',

    dictTag:'Dictionary Tag',
    dataStatus:'Data Status',
    dictKey:'Dictionary Key',
    sort:'Sort',
    colorType:'Color Type',
    cssClass:'CSS Class',
  },
  sms:{
    signature:'SMS Signature',
    status:'Enable Status',
    startCreateTime:'Start Time',
    endCreateTime:'End Time',
    channelCode:'Channel Code',
    apiKey:'Account for SMS API',
    apiSecret:'Key for SMS API',
    callbackUrl:'SMS sending callback URL',
  }
}
